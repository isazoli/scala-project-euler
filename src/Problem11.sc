object Problem11 {
  val gridStr = """08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""
                                                  //> gridStr  : String = 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 9
                                                  //| 1 08
                                                  //| 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
                                                  //| 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
                                                  //| 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
                                                  //| 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
                                                  //| 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
                                                  //| 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
                                                  //| 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
                                                  //| 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
                                                  //| 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
                                                  //| 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
                                                  //| 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
                                                  //| 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
                                                  //| 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
                                                  //| 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
                                                  //| Output exceeds cutoff limit.

  val grid = gridStr.split("\n").map(x => x.split(" ")).map(_.map(_.toInt))
                                                  //> grid  : Array[Array[Int]] = Array(Array(8, 2, 22, 97, 38, 15, 0, 40, 0, 75,
                                                  //|  4, 5, 7, 78, 52, 12, 50, 77, 91, 8), Array(49, 49, 99, 40, 17, 81, 18, 57,
                                                  //|  60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), Array(81, 49, 31, 73, 55, 7
                                                  //| 9, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), Array(52, 70, 95
                                                  //| , 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), Array(2
                                                  //| 2, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 
                                                  //| 80), Array(24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35
                                                  //| , 17, 12, 50), Array(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54
                                                  //| , 70, 66, 18, 38, 64, 70), Array(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94,
                                                  //|  39, 63, 8, 40, 91, 66, 49, 94, 21), Array(24, 55, 58, 5, 66, 73, 99, 26, 9
                                                  //| 7, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72), Array(21, 36, 23, 9, 75, 0,
                                                  //|  76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), Array(78, 17, 53, 
                                                  //| 28, 22, 75, 31, 67, 15,
                                                  //| Output exceeds cutoff limit.

  val cursorSize: Int = 4                         //> cursorSize  : Int = 4

  trait Direction {
    def step: (Int, Int)
  }
  object Right extends Direction { def step = (0, 1) }
  object Down extends Direction { def step = (1, 0) }
  object RightDown extends Direction { def step = (1, 1) }
  object LeftDown extends Direction { def step = (-1, 1) }

  def directions = List(Right, Down, RightDown, LeftDown)
                                                  //> directions: => List[Problem11.Direction]

  def product(xy: (Int, Int))(d: Direction): Option[Long] = {
    val l = for {
      c <- 0 until cursorSize
      (x, y) = xy
      (nextX, nextY) = (x + c * d.step._1, y + c * d.step._2)
      if (nextX >= 0 && nextY >= 0) // check negative idx
      if (nextX < grid.size && nextY < grid(nextX).size) // check OutOfBounds
    } yield (grid(nextX)(nextY))
    if (l.size == cursorSize) Some(l.product) else None
  }                                               //> product: (xy: (Int, Int))(d: Problem11.Direction)Option[Long]

  val pList = for {
    rowIdx <- 0 until grid.size
    columnIdx <- 0 until grid(rowIdx).size
    direction <- directions
    p = product((rowIdx, columnIdx))(direction)
    if (p.isDefined)
  } yield (p.get)                                 //> pList  : scala.collection.immutable.IndexedSeq[Long] = Vector(34144, 165110
                                                  //| 4, 279496, 162184, 336140, 57816, 1216380, 6414210, 2904000, 0, 6514520, 14
                                                  //| 32981, 0, 142120, 1809864, 0, 5759100, 540270, 0, 0, 0, 0, 2777040, 1158720
                                                  //| 0, 0, 0, 0, 10500, 11118600, 85425, 10920, 184960, 271360, 141960, 750400, 
                                                  //| 2414720, 340704, 36358, 641130, 2433600, 9444864, 597402, 2402400, 6027840,
                                                  //|  244608, 4204200, 122688, 22464, 2802800, 362600, 9172800, 112112, 7312032,
                                                  //|  0, 9507960, 4540536, 16194745, 3298680, 5210170, 1781787, 5452920, 4664880
                                                  //| , 1936836, 991440, 4768360, 8316000, 1412802, 190740, 1314797, 4986360, 257
                                                  //| 23980, 1952748, 5355720, 174636, 3313656, 5058180, 6178914, 4580064, 354960
                                                  //| 0, 15785820, 15642720, 5797680, 13638816, 4287360, 2865520, 1664640, 45560,
                                                  //|  11630640, 8104320, 2713600, 13956768, 114268, 13522432, 569664, 4843520, 6
                                                  //| 044940, 741888, 4636800, 252747, 666624, 286272, 61152, 0, 478632, 149760, 
                                                  //| 48048, 1044576, 0, 8981
                                                  //| Output exceeds cutoff limit.
  pList.contains(1788696)                         //> res0: Boolean = true
  pList.contains(5438256)                         //> res1: Boolean = true
  pList.contains(9507960)                         //> res2: Boolean = true
  pList.max                                       //> res3: Long = 70600674
}